AWSTemplateFormatVersion: 2010-09-09
Description: Deploys VPC and other resources like Subnets, RTs, IGW, NGW
Parameters:
  EnvironmentParameter:
    Description: Select the type of environment to create.
    Type: String
    AllowedValues: [ staging, production ]
    Default: staging
  VpcBeginRange:
    Description: The first 2 octets of the VPC network range, e.g. 192.168
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})'
    Default: '10.10'
    ConstraintDescription: 'Must be 2 octets, e.g. 10.25'
  VpcCidrBlock:
    Description: The Vpc subnet block.
    Type: String
    Default: 0.0/16
  PublicSubnet1CidrBlock:
    Description: The Public Subnet 1 subnet block.
    Type: String
    Default: 0.0/24
  PublicSubnet2CidrBlock:
    Description: The Public Subnet 2 subnet block.
    Type: String
    Default: 1.0/24
  PrivateSubnet1CidrBlock:
    Description: The Private Subnet 1 subnet block.
    Type: String
    Default: 4.0/24
  PrivateSubnet2CidrBlock:
    Description: The Private Subnet 2 subnet block.
    Type: String
    Default: 5.0/24
  DBSubnet1CidrBlock:
    Description: The DB Subnet 1 subnet block.
    Type: String
    Default: 8.0/24
  DBSubnet2CidrBlock:
    Description: The DB Subnet 2 subnet block.
    Type: String
    Default: 9.0/24
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      CidrBlock: !Join [ '.', [ !Ref VpcBeginRange, !Ref VpcCidrBlock ] ]
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  DatabaseRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'AWS::StackName', igw ] ]
  Ngw:
    Type: AWS::EC2::NatGateway
    DependsOn: IgwVpcAttachment
    Properties:
      AllocationId: !GetAtt [ NgwEIP, AllocationId ]
      SubnetId: !Ref PublicSubnet1
  NgwEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: Vpc
  IgwVpcAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw
  PrivateRouteNgw:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRT
      NatGatewayId: !Ref Ngw
  DatabaseRouteNgw:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref DatabaseRT
      NatGatewayId: !Ref Ngw
  PublicRouteIgw:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRT
      GatewayId: !Ref Igw
    DependsOn: IgwVpcAttachment
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'AWS::StackName', Public Subnet, !Select [ 0, !GetAZs '' ] ] ]
      CidrBlock: !Join [ '.', [ !Ref VpcBeginRange, !Ref PublicSubnet1CidrBlock ] ]
      VpcId: !Ref Vpc
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'AWS::StackName', Public Subnet, !Select [ 1, !GetAZs '' ] ] ]
      CidrBlock: !Join [ '.', [ !Ref VpcBeginRange, !Ref PublicSubnet2CidrBlock ] ]
      VpcId: !Ref Vpc
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'AWS::StackName', Private Subnet, !Select [ 0, !GetAZs '' ] ] ]
      CidrBlock: !Join [ '.', [ !Ref VpcBeginRange, !Ref PrivateSubnet1CidrBlock ] ]
      VpcId: !Ref Vpc
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'AWS::StackName', Private Subnet, !Select [ 1, !GetAZs '' ] ] ]
      CidrBlock: !Join [ '.', [ !Ref VpcBeginRange, !Ref PrivateSubnet2CidrBlock ] ]
      VpcId: !Ref Vpc
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'AWS::StackName', DB Subnet, !Select [ 0, !GetAZs '' ] ] ]
      CidrBlock: !Join [ '.', [ !Ref VpcBeginRange, !Ref DBSubnet1CidrBlock ] ]
      VpcId: !Ref Vpc
  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'AWS::StackName', DB Subnet, !Select [ 1, !GetAZs '' ] ]]
      CidrBlock: !Join [ '.', [ !Ref VpcBeginRange, !Ref DBSubnet2CidrBlock ] ]
      VpcId: !Ref Vpc
  DBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRT
      SubnetId: !Ref DatabaseSubnet1
  DBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRT
      SubnetId: !Ref DatabaseSubnet2
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnet2
  ElasticacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: !Join [ '-', [ !Ref AWS::StackName, elasticachesubnetgroup ] ]
      Description: !Join [ '-', [ !Ref AWS::StackName, elasticachesubnetgroup ] ]
      SubnetIds: [ !Ref DatabaseSubnet1, !Ref DatabaseSubnet2 ]
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref 'AWS::StackName', dbsubnetgroup ] ]
      DBSubnetGroupDescription: !Join [ '-', [ !Ref 'AWS::StackName', dbsubnetgroup ] ]
      SubnetIds: [ !Ref DatabaseSubnet1, !Ref DatabaseSubnet2 ]
Outputs:
  VpcOutput:
    Description: The VPC ID
    Value: !Ref Vpc
    Export:
      Name: !Sub '${AWS::StackName}-vpc'
#   publicsubnet1output:
#     Description: The publicsubnet1 ID
#     Value: !Ref publicsubnet1
#     Export:
#       Name: !Sub '${AWS::StackName}-publicsubnet1'
#   publicsubnet2output:
#     Description: The publicsubnet2 ID
#     Value: !Ref publicsubnet2
#     Export:
#       Name: !Sub '${AWS::StackName}-publicsubnet2'
  PrivateSubnet1CidrBlockOutput:
    Description: The  Private Subnet 1 ID
    Value: !Join [ '.', [ !Ref VpcBeginRange, !Ref PrivateSubnet1CidrBlock ] ]
    Export:
      Name: !Sub '${AWS::StackName}-privatesubnet1-cidr-block'
  PrivateSubnet2CidrBlockOutput:
    Description: The Private Subnet2 ID
    Value: !Join [ '.', [ !Ref VpcBeginRange, !Ref PrivateSubnet2CidrBlock ] ]
    Export:
      Name: !Sub '${AWS::StackName}-privatesubnet2-cidr-block'
#   dbsubnet1output:
#     Description: The dbsubnet1 ID
#     Value: !Ref dbsubnet1
#     Export:
#       Name: !Sub '${AWS::StackName}-dbsubnet1'
#   dbsubnet2output:
#     Description: The dbsubnet2 ID
#     Value: !Ref dbsubnet2
#     Export:
#       Name: !Sub '${AWS::StackName}-dbsubnet2'
#   dbsubnet1routetableoutput:
#     Description: The dbsubnet4 ID
#     Value: !Ref dbsubnet1routetable
#     Export:
#       Name: !Sub '${AWS::StackName}-dbsubnet1routetable'
#   dbsubnet2routetableoutput:
#     Description: The dbsubnet4 ID
#     Value: !Ref dbsubnet2routetable
#     Export:
#       Name: !Sub '${AWS::StackName}-dbsubnet2routetable'
#   publicsubnet1routetableoutput:
#     Description: The dbsubnet4 ID
#     Value: !Ref publicsubnet1routetable
#     Export:
#       Name: !Sub '${AWS::StackName}-publicsubnet1routetable'
#   publicsubnet2routetableoutput:
#     Description: The dbsubnet4 ID
#     Value: !Ref publicsubnet2routetable
#     Export:
#       Name: !Sub '${AWS::StackName}-publicsubnet2routetable'
#   privatesubnet1routetableoutput:
#     Description: The dbsubnet4 ID
#     Value: !Ref privatesubnet1routetable
#     Export:
#       Name: !Sub '${AWS::StackName}-privatesubnet1routetable'
#   privatesubnet2routetableoutput:
#     Description: The dbsubnet4 ID
#     Value: !Ref privatesubnet2routetable
#     Export:
#       Name: !Sub '${AWS::StackName}-privatesubnet2routetable'
  dbsubnetgroupoutput:
    Description: The RDS subnet group
    Value: !Ref DatabaseSubnetGroup
    Export:
      Name: !Sub '${AWS::StackName}-dbsubnetgroup'
  elasticachesubnetgroupoutput:
    Description: The RDS subnet group
    Value: !Ref ElasticacheSubnetGroup
    Export:
      Name: !Sub '${AWS::StackName}-elasticachesubnetgroup'
#   StackOutputName:
#     Description: The VPC stack name
#     Value: !Ref 'AWS::StackName'
#   EnvironmentParameter:
#     Description: Environment (e.g. production)
#     Value: !Ref EnvironmentParameter
#     Export:
#       Name: !Sub '${AWS::StackName}-environment'
